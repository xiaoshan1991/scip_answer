(define (filtered-accumulate filter combiner null-value term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (if (filter a)
            (iter (next a) (combiner result
                                 (term a)))
            (iter (next a) result))))
  (iter a null-value))
(define (sum-prime a b)
  (filtered-accumulate prime? + 0 identity a inc b))
(define (inc n) (+ n 1))

(define (smallest-divisor n)
  (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b)
  (= (remainder b a) 0))
(define (square x)
  (* x x))
(define (prime? n)
  (= n (smallest-divisor n)))
(define (identity x) x)

(define (product-lt-n-prime n)
  (define (filter x)
    (relative-prime? x n))
  (filtered-accumulate filter * 1 identity 1 inc n))
(define (relative-prime? x n)
  (= (gcd x n) 1)) 
(sum-prime 1 10)
(product-lt-n-prime 10)